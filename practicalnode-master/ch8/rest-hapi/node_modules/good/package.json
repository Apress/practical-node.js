{
  "name": "good",
  "description": "Server and process monitoring plugin",
  "version": "2.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/spumko/good"
  },
  "main": "index",
  "keywords": [
    "process",
    "monitor",
    "log",
    "report",
    "hapi",
    "plugin"
  ],
  "engines": {
    "node": "0.10.x"
  },
  "dependencies": {
    "hoek": "1.x.x",
    "nipple": "2.x.x",
    "async": "0.2.x",
    "optimist": "0.6.x",
    "json-stringify-safe": "5.0.x"
  },
  "peerDependencies": {
    "hapi": ">=2.x.x"
  },
  "devDependencies": {
    "redis": "0.9.x",
    "hapi": "3.x.x",
    "lab": "1.x.x"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/spumko/good/raw/master/LICENSE"
    }
  ],
  "contributors": [
    {
      "name": "Van Nguyen",
      "email": "the.gol.effect@gmail.com"
    },
    {
      "name": "Eran Hammer",
      "email": "eran@hueniverse.com",
      "url": "http://hueniverse.com"
    },
    {
      "name": "Wyatt Preul",
      "email": "wpreul@gmail.com",
      "url": "http://jsgeek.com"
    }
  ],
  "readme": "<a href=\"https://github.com/spumko\"><img src=\"https://raw.github.com/spumko/spumko/master/images/from.png\" align=\"right\" /></a>\n![good Logo](https://raw.github.com/spumko/good/master/images/good.png)\n\n[**hapi**](https://github.com/spumko/hapi) process monitoring\n\n[![Build Status](https://secure.travis-ci.org/spumko/good.png)](http://travis-ci.org/spumko/good)\n\nThe _'Monitor'_ should be configured using a _'hapi'_ server instead of calling the _'Monitor'_ constructor directly.\n\n\n**good** is a process monitor for the following types of events:\n- System and process performance (ops) - CPU, memory, disk, and other metrics.\n- Requests logging (request) - framework and application generated logs generated during the lifecycle of each incoming request.\n- General events (log) - logging information not bound to a specific request such as system errors, background processing,\n  configuration errors, etc. Described in [General Events Logging](#general-events-logging).\n- Internal errors (error) - request responses that have a status code of 500. Described in the\n  [server events documentation](http://spumko.github.io/resource/api/#server-events).\n\nApplications with multiple server instances, each with its own monitor should only include one _log_ subscription per destination\nas general events are a process-wide facility and will result in duplicated log events. To override some or all of the defaults,\nset `options` to an object with the following optional settings:\n\n- `broadcastInterval` - the interval in milliseconds to send collected events to HTTP subscribers. _0_ means send immediately. Defaults to _0_.\n- `opsInterval` - the interval in milliseconds to sample system and process performance metrics. Minimum is _100ms_. Defaults to _15 seconds_.\n- `leakDetection` - determines if memory leaks should be detected.  Any leaks will be logged with ops data.  Defaults to _false_.\n- `gcDetection` - determines if garbage collections should be detected and counted.  The GC count is logged with ops data.  Defaults to _false_.\n- `extendedRequests` - determines if the full request log is sent or only the event summary. Defaults to _false_.\n- `maxLogSize` - the maximum byte size to allow log files to become before creating a new log file.  Default is _0_ which means log files will\n  not be split.  When split the log file extension will be incremented by 1.  The initial log file has an extension of .001.\n- `requestsEvent` - the event type used to capture completed requests. Defaults to 'tail'. Options are:\n    - 'response' - the response was sent but request tails may still be pending.\n    - 'tail' - the response was sent and all request tails completed.\n- `requestsTimeout` - the number of milliseconds to set the request timeout to when broadcasting to HTTP subscribers\n- `subscribers` - an object where each key is a destination and each value is either an array or object with an array of subscriptions.\n  The subscriptions that are available are _ops_, _request_, _log_ and _error_. The destination can be a URI, file or directory path, and _console_.\n  Defaults to a console subscriber for _ops_, _request_, and _log_ events. To disable the console output for the server instance pass an empty array\n  into the subscribers \"console\" configuration.\n\nFor example:\n\n```javascript\nvar Hapi = require('hapi');\n\nvar server = new Hapi.Server();\n\nvar options = {\n    subscribers: {\n        'console':                         ['ops', 'request', 'log', 'error'],\n        'http://localhost/logs':           ['log'],\n        '/tmp/logs/':                      ['request', 'log'],\n        'udp://127.0.0.1:9000':            ['request'],\n        'redis://127.0.0.1:6379/listname': ['request']\n    }\n};\n\nserver.pack.require('good', options, function (err) {\n\n    if (!err) {\n        // Plugin loaded successfully\n    }\n});\n```\n\nDisabling console output:\n\n```javascript\nvar options = {\n    subscribers: {\n        console: [],\n        'http://localhost/logs': ['log']\n    }\n};\n```\n\nLog messages are created with tags.  Usually a log will include a tag to indicate if it is related to an error or info along with where the message originates.  If, for example, the console should only output error's that were logged you can use the following configuration:\n\n```javascript\nvar options = {\n    subscribers: {\n        console: { tags: ['error'], events: ['log'] }\n    }\n};\n```\n\nLog file subscribers can either be a file or a directory.  When logging to a file (there isn't a trailing slash) then the files will be written with the file name in the provided path.  Otherwise, when the subscriber is a directory the log files will be named with a timestamp and placed in the directory.  All log files will have .001, .002, and .003 formatted extensions.  Below is an example of file and directory subscribers:\n\n```javascript\nvar options = {\n    subscribers: {\n        '/logs/good_log': { tags: ['error'], events: ['log'] },     // Creates good_log.001 file in /logs/\n        '/logs/': { events: ['request'] }                           // Creates {timestamp}.001 file in /logs/\n    }\n};\n```\n\n### Broadcast Request Structure\n\nWhen **good** broadcasts data to a remote endpoint it sends json that has the following properties:\n\n- `schema` - the value of 'schemaName' in the settings.  Default is 'good.v1'\n- `host` - the operating system [hostname](http://nodejs.org/api/os.html#os_os_hostname)\n- `appVer` - the version of **good**\n- `timestamp` - the current time of the server\n- `events` - an array of the events that are subscribed to\n\n\n### Replaying request logs\n\nGood includes a _'replay'_ script that is capable of replaying any request events found in a log file.  Below is the command to use to execute _'replay'_:\n\n`replay -l log.json -h host -n #_of_concurrent_requests`\n\n### Redis Logging\n\nRedis logging requires a url formatted like this:\n\n`redis://<hostname>:<port>/<listname>`\n\ne.g.\n\n`redis://127.0.0.1:6379/mylogs`\n\nThis will append to the specified list using an [RPUSH](http://redis.io/commands/rpush).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/spumko/good/issues"
  },
  "homepage": "https://github.com/spumko/good",
  "_id": "good@2.0.0",
  "_shasum": "b6b7c50428b738c1409c728ceca5b855e5d6a34b",
  "_from": "good@2.0.0",
  "_resolved": "https://registry.npmjs.org/good/-/good-2.0.0.tgz"
}
